// HTTP old generation (v0.9, v1.0, v1.1) C library.
// Copyright (c) 2019 AUTHORS, MIT License.

// This file was generated, do not edit manually.

// It may not be possible to run generator while cross compiling.
// So generated file should be shipped with its template.

#if !defined(HOG_PROCESSOR_@PREFIX@_H)
#define HOG_PROCESSOR_@PREFIX@_H

#include <stdbool.h>
#include <stdlib.h>

#include "@RELATIVE_SOURCE_PATH@common.h"
#include "@RELATIVE_SOURCE_PATH@log.h"

typedef uint@CMAKE_MIN_STATE_BITS@_t hog_processor_@PREFIX_LOWER_CASE@_state_t;

extern const hog_processor_state_fast_t HOG_PROCESSOR_@PREFIX@_INITIAL_STATE;

extern const size_t HOG_PROCESSOR_@PREFIX@_CONSTANTS_LENGTH;
extern const size_t HOG_PROCESSOR_@PREFIX@_ALPHABET_LENGTH;
extern const size_t HOG_PROCESSOR_@PREFIX@_ALPHABET_MAX_LENGTH;

extern const hog_symbol_fast_t HOG_PROCESSOR_@PREFIX@_UNDEFINED_SYMBOL;
extern const hog_symbol_t      HOG_PROCESSOR_@PREFIX@_SYMBOL_BY_BYTES[];

extern const hog_processor_@PREFIX_LOWER_CASE@_state_t HOG_PROCESSOR_@PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS[];

inline hog_processor_state_fast_t hog_processor_@PREFIX_LOWER_CASE@_get_next_state(
  hog_processor_state_fast_t state, hog_symbol_fast_t byte)
{
  hog_symbol_fast_t symbol = HOG_PROCESSOR_@PREFIX@_SYMBOL_BY_BYTES[byte];

  // We need to verify symbol if alphabet is not full.
  if (HOG_PROCESSOR_@PREFIX@_ALPHABET_LENGTH != HOG_PROCESSOR_@PREFIX@_ALPHABET_MAX_LENGTH && symbol == HOG_PROCESSOR_@PREFIX@_UNDEFINED_SYMBOL) {
    HOG_LOG_ERROR("@PREFIX_LOWER_CASE@ processor received invalid byte: %u", byte);
    return HOG_PROCESSOR_@PREFIX@_INITIAL_STATE;
  }

  return HOG_PROCESSOR_@PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS[state * HOG_PROCESSOR_@PREFIX@_ALPHABET_LENGTH + symbol];
}

inline bool hog_processor_@PREFIX_LOWER_CASE@_is_valid(hog_processor_state_fast_t state)
{
  // State of each constant equals to its index.
  return state < HOG_PROCESSOR_@PREFIX@_CONSTANTS_LENGTH;
}

#endif // HOG_PROCESSOR_@PREFIX@_H
