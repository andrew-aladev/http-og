// HTTP old generation (v0.9, v1.0, v1.1) C library.
// Copyright (c) 2019 AUTHORS, MIT License.

// This file was generated, do not edit manually.

// It may not be possible to run generator while cross compiling.
// So generated file should be shipped with its template.

#include "@PARSER_FILE_NAME@.h"

// clang-format off

// -- constants --

const char* HOG_@PARSER_PREFIX@_PARSER_CONSTANTS[] = {
@CMAKE_PARSER_CONSTANTS@};

const size_t HOG_@PARSER_PREFIX@_PARSER_CONSTANTS_LENGTH = sizeof(HOG_@PARSER_PREFIX@_PARSER_CONSTANTS) / sizeof(HOG_@PARSER_PREFIX@_PARSER_CONSTANTS[0]);
const hog_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t HOG_@PARSER_PREFIX@_PARSER_INITIAL_STATE = HOG_@PARSER_PREFIX@_PARSER_CONSTANTS_LENGTH;

// -- alphabet --

const hog_symbol_t HOG_@PARSER_PREFIX@_PARSER_ALPHABET[] = {
@CMAKE_PARSER_ALPHABET@};

const size_t HOG_@PARSER_PREFIX@_PARSER_ALPHABET_LENGTH     = sizeof(HOG_@PARSER_PREFIX@_PARSER_ALPHABET) / sizeof(HOG_@PARSER_PREFIX@_PARSER_ALPHABET[0]);
const size_t HOG_@PARSER_PREFIX@_PARSER_ALPHABET_MAX_LENGTH = HOG_MAX_SYMBOL + 1;

const hog_symbol_fast_t HOG_@PARSER_PREFIX@_PARSER_UNDEFINED_SYMBOL       = HOG_MAX_SYMBOL;
const size_t            HOG_@PARSER_PREFIX@_PARSER_SYMBOL_BY_BYTES_LENGTH = HOG_MAX_SYMBOL + 1;

const hog_symbol_t HOG_@PARSER_PREFIX@_PARSER_SYMBOL_BY_BYTES[HOG_@PARSER_PREFIX@_PARSER_SYMBOL_BY_BYTES_LENGTH] = {
  [0 ... HOG_@PARSER_PREFIX@_PARSER_SYMBOL_BY_BYTES_LENGTH - 1] = HOG_@PARSER_PREFIX@_PARSER_UNDEFINED_SYMBOL,
@CMAKE_PARSER_SYMBOL_BY_BYTES@};

// -- next state by last symbols --

const size_t HOG_@PARSER_PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS_LENGTH = (@CMAKE_PARSER_MAX_STATE@ + 1) * HOG_@PARSER_PREFIX@_PARSER_ALPHABET_LENGTH;

const hog_@PARSER_PREFIX_LOWER_CASE@_parser_state_t HOG_@PARSER_PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS[HOG_@PARSER_PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS_LENGTH] = {
  [0 ... HOG_@PARSER_PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS_LENGTH - 1] = HOG_@PARSER_PREFIX@_PARSER_INITIAL_STATE,
@CMAKE_PARSER_NEXT_STATE_BY_LAST_SYMBOLS@};

// clang-format on

extern inline hog_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t hog_@PARSER_PREFIX_LOWER_CASE@_get_next_state(
  hog_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t state, hog_symbol_fast_t byte);

extern inline bool hog_@PARSER_PREFIX_LOWER_CASE@_is_finished(hog_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t state);
