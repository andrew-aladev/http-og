// Old generation HTTP (v0.9, v1.0, v1.1) C library.
// Copyright (c) 2019 AUTHORS, MIT License.

// This file was generated, do not edit manually.

// It may not be possible to run generator while cross compiling.
// So generated file should be shipped with its template.

#if !defined(OGHTTP_@PARSER_PREFIX@_PARSER_H)
#define OGHTTP_@PARSER_PREFIX@_PARSER_H

#include <stdbool.h>
#include <stdlib.h>

#include "@PARSER_SOURCE_PATH@common.h"

// clang-format off

typedef uint@CMAKE_PARSER_MIN_STATE_BITS@_t      oghttp_@PARSER_PREFIX_LOWER_CASE@_parser_state_t;
typedef uint_fast@CMAKE_PARSER_MIN_STATE_BITS@_t oghttp_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t;

// -- constants --

extern const char*  OGHTTP_@PARSER_PREFIX@_PARSER_CONSTANTS[];
extern const size_t OGHTTP_@PARSER_PREFIX@_PARSER_CONSTANTS_LENGTH;
extern const oghttp_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t OGHTTP_@PARSER_PREFIX@_PARSER_INITIAL_STATE;

// -- alphabet --

extern const oghttp_symbol_t OGHTTP_@PARSER_PREFIX@_PARSER_ALPHABET[];
extern const size_t          OGHTTP_@PARSER_PREFIX@_PARSER_ALPHABET_LENGTH;
extern const size_t          OGHTTP_@PARSER_PREFIX@_PARSER_ALPHABET_MAX_LENGTH;

extern const oghttp_symbol_fast_t OGHTTP_@PARSER_PREFIX@_PARSER_UNDEFINED_SYMBOL;
extern const size_t               OGHTTP_@PARSER_PREFIX@_PARSER_SYMBOL_BY_BYTES_LENGTH;
extern const oghttp_symbol_t      OGHTTP_@PARSER_PREFIX@_PARSER_SYMBOL_BY_BYTES[];

// -- next state by last symbols --

extern const size_t OGHTTP_@PARSER_PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS_LENGTH;
extern const oghttp_@PARSER_PREFIX_LOWER_CASE@_parser_state_t OGHTTP_@PARSER_PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS[];

// clang-format on

inline oghttp_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t oghttp_@PARSER_PREFIX_LOWER_CASE@_get_next_state(
  oghttp_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t state, oghttp_symbol_fast_t byte)
{
  oghttp_symbol_fast_t symbol = OGHTTP_@PARSER_PREFIX@_PARSER_SYMBOL_BY_BYTES[byte];
  if (OGHTTP_@PARSER_PREFIX@_PARSER_ALPHABET_LENGTH != OGHTTP_@PARSER_PREFIX@_PARSER_ALPHABET_MAX_LENGTH && symbol == OGHTTP_@PARSER_PREFIX@_PARSER_UNDEFINED_SYMBOL) {
    return OGHTTP_@PARSER_PREFIX@_PARSER_INITIAL_STATE;
  }

  return OGHTTP_@PARSER_PREFIX@_NEXT_STATE_BY_LAST_SYMBOLS[state * OGHTTP_@PARSER_PREFIX@_PARSER_ALPHABET_LENGTH + symbol];
}

inline bool oghttp_@PARSER_PREFIX_LOWER_CASE@_is_finished(oghttp_@PARSER_PREFIX_LOWER_CASE@_parser_state_fast_t state)
{
  return state < OGHTTP_@PARSER_PREFIX@_PARSER_CONSTANTS_LENGTH;
}

#endif // OGHTTP_@PARSER_PREFIX@_PARSER_H
